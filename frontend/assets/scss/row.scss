@mixin row-media-query($dim, $base, $prefixes, $spaces) {

    @media (min-width: $dim) {
        @for $i from 1 through 6 {
            .row.row-items-no-space.#{$base}row-items-#{$i}:not(.row-items-flex) > * {
                min-width: percentage(1 / $i);
                max-width: percentage(1 / $i);
            }
            @each $space in $spaces {
                .row#{nth($space, 1)}.#{$base}row-items-#{$i}:not(.row-items-flex) > * {
                    min-width: calc(#{percentage(1 / $i)} - #{2 * nth($space, 2)});
                    max-width: calc(#{percentage(1 / $i)} - #{2 * nth($space, 2)});
                }
            }
            @each $col in $colNumber {
                @if $col <= $i {
                    @each $prefix in $prefixes {
                        .row.row-items-no-space.#{$base}row-items-#{$i}:not(.row-items-flex) > .#{$prefix}col-#{$col} {
                            min-width: percentage(1 * $col / $i);
                            max-width: percentage(1 * $col / $i);
                        }
                        @each $space in $spaces {
                            .row#{nth($space, 1)}.#{$base}row-items-#{$i}:not(.row-items-flex) > .#{$prefix}col-#{$col} {
                                min-width: calc(#{percentage(1 * $col / $i)} - #{2 * nth($space, 2)});
                                max-width: calc(#{percentage(1 * $col / $i)} - #{2 * nth($space, 2)});
                            }
                        }
                    }
                }
            }

        }
    }

    @media (min-width: $dim) {
        @for $i from 1 through 6 {
            .row.row-items-no-space.row-items-flex.#{$base}row-items-#{$i} > * {
                flex: 1 1 percentage(1 / $i);
            }
            @each $space in $spaces {
                .row#{nth($space, 1)}.row-items-flex.#{$base}row-items-#{$i} > * {
                    flex: 1 1 calc(#{percentage(1 / $i)} - #{2 * nth($space, 2)});
                }
            }

            @each $col in $colNumber {
                @if $col <= $i {
                    @each $prefix in $prefixes {
                        .row.row-items-no-space.row-items-flex.#{$base}row-items-#{$i} > .#{$prefix}col-#{$col} {
                            flex: 1 1 percentage(1 * $col / $i);
                        }
                        @each $space in $spaces {
                            .row#{nth($space, 1)}.row-items-flex.#{$base}row-items-#{$i} > .#{$prefix}col-#{$col} {
                                flex: 1 1 calc(#{percentage(1 * $col / $i)} - #{2 * nth($space, 2)});
                            }
                        }
                    }
                }
            }
        }
    }
}

@mixin row($dim: 0) {
    $prefixes: '';
    $base: '';
    $spaces: (
        '' 0.25rem,
        '.row-items-space-half' 0.5rem,
        '.row-items-space-1' 1rem,
        '.row-items-space-2' 2rem,
        '.row-items-space-3' 3rem
    );

    @if ($dim == $xs) {
        $base: xs-;
        $prefixes: xs-;
    } @else if ($dim == $sm) {
        $base: sm-;
        $prefixes: xs- sm-;
    } @else if ($dim == $md) {
        $base: md-;
        $prefixes: xs- sm- md-;
    } @else if ($dim == $lg) {
        $base: lg-;
        $prefixes: xs- sm- md- lg-;
    } @else if ($dim == $xl) {
        $base: xl-;
        $prefixes: xs- sm- md- lg- xl-;
    } @else if ($dim == $xxl) {
        $base: xxl-;
        $prefixes: xs- sm- md- lg- xl- xxl-;
    }

    @if ($dim == 0) {
        @for $i from 1 through 6 {
            .row.row-items-no-space.row-items-#{$i}:not(.row-items-flex) > * {
                min-width: percentage(1 / $i);
                max-width: percentage(1 / $i);
            }
            .row.row-items-flex.row-items-no-space.row-items-#{$i} > * {
                flex: 1 1 percentage(1 / $i);
            }
            @each $space in $spaces {
                .row#{nth($space, 1)}.row-items-#{$i}:not(.row-items-flex) > * {
                    min-width: calc(#{percentage(1 / $i)} - #{2 * nth($space, 2)});
                    max-width: calc(#{percentage(1 / $i)} - #{2 * nth($space, 2)});
                }
                .row#{nth($space, 1)}.row-items-flex.row-items-#{$i} > * {
                    flex: 1 1 calc(#{percentage(1 / $i)} - #{2 * nth($space, 2)});
                }
            }

            @each $col in $colNumber {
                @if $col <= $i {
                    .row.row-items-no-space.row-items-#{$i}:not(.row-items-flex) > .col-#{$col} {
                        min-width: percentage(1 * $col / $i);
                        max-width: percentage(1 * $col / $i);
                    }
                    .row.row-items-no-space.row-items-flex.row-items-#{$i} > .col-#{$col} {
                        flex: 1 1 percentage(1 * $col / $i);
                    }
                    @each $space in $spaces {
                        .row#{nth($space, 1)}.row-items-#{$i}:not(.row-items-flex) > .col-#{$col} {
                            min-width: calc(#{percentage(1 * $col / $i)} - #{2 * nth($space, 2)});
                            max-width: calc(#{percentage(1 * $col / $i)} - #{2 * nth($space, 2)});
                        }
                        .row#{nth($space, 1)}.row-items-flex.row-items-#{$i} > .col-#{$col} {
                            flex: 1 1 calc(#{percentage(1 * $col / $i)} - #{2 * nth($space, 2)});
                        }
                    }
                }
            }
        }
    } @else {
        @include row-media-query($dim, $base, $prefixes, $spaces);
    }
}

.row {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    margin: 0 -0.25rem;

    > * {
        margin: 0.25rem;
    }

    &.row-nowrap {
        flex-wrap: nowrap;
    }
}

.row.row-items-no-space {
    margin: 0;

    > * {
        margin: 0;
    }
}

.row.row-items-space-half {
    margin: 0 -0.5rem;

    > * {
        margin: 0.5rem;
    }
}

.row.row-items-space-1 {
    margin: 0 -1rem;

    > * {
        margin: 1rem;
    }
}

.row.row-items-flex > * {
    min-width: 0;
    flex: 1 1 auto;
}

@include row();

//@each $size in $mediaQueries {
//    @include row($size);
//}
